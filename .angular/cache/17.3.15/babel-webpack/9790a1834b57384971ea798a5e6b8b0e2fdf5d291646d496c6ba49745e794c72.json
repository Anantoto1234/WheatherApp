{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherService {\n  constructor(http) {\n    this.http = http;\n    this.apiKey = '35370c5be5d8718ff614f8e7658a4f66'; // Thay thế bằng API key thực tế\n    this.baseUrl = 'https://api.openweathermap.org/data/2.5';\n  }\n  getCurrentWeather(city) {\n    const params = new HttpParams().set('q', city).set('appid', this.apiKey).set('units', 'metric').set('lang', 'vi');\n    return this.http.get(`${this.baseUrl}/weather`, {\n      params\n    });\n  }\n  getForecast(city) {\n    const params = new HttpParams().set('q', city).set('appid', this.apiKey).set('units', 'metric').set('lang', 'vi');\n    return this.http.get(`${this.baseUrl}/forecast`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function WeatherService_Factory(t) {\n      return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WeatherService,\n      factory: WeatherService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","WeatherService","constructor","http","apiKey","baseUrl","getCurrentWeather","city","params","set","get","getForecast","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/haphan/Documents/Learning/angular-web/src/app/services/weather.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CurrentWeather, Forecast } from '../models/weather.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n  private apiKey = '35370c5be5d8718ff614f8e7658a4f66'; // Thay thế bằng API key thực tế\n  private baseUrl = 'https://api.openweathermap.org/data/2.5';\n\n  constructor(private http: HttpClient) { }\n\n  getCurrentWeather(city: string): Observable<CurrentWeather> {\n    const params = new HttpParams()\n      .set('q', city)\n      .set('appid', this.apiKey)\n      .set('units', 'metric')\n      .set('lang', 'vi');\n\n    return this.http.get<CurrentWeather>(`${this.baseUrl}/weather`, { params });\n  }\n\n  getForecast(city: string): Observable<Forecast> {\n    const params = new HttpParams()\n      .set('q', city)\n      .set('appid', this.apiKey)\n      .set('units', 'metric')\n      .set('lang', 'vi');\n\n    return this.http.get<Forecast>(`${this.baseUrl}/forecast`, { params });\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,kCAAkC,CAAC,CAAC;IAC7C,KAAAC,OAAO,GAAG,yCAAyC;EAEnB;EAExCC,iBAAiBA,CAACC,IAAY;IAC5B,MAAMC,MAAM,GAAG,IAAIR,UAAU,EAAE,CAC5BS,GAAG,CAAC,GAAG,EAAEF,IAAI,CAAC,CACdE,GAAG,CAAC,OAAO,EAAE,IAAI,CAACL,MAAM,CAAC,CACzBK,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CACtBA,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC;IAEpB,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAiB,GAAG,IAAI,CAACL,OAAO,UAAU,EAAE;MAAEG;IAAM,CAAE,CAAC;EAC7E;EAEAG,WAAWA,CAACJ,IAAY;IACtB,MAAMC,MAAM,GAAG,IAAIR,UAAU,EAAE,CAC5BS,GAAG,CAAC,GAAG,EAAEF,IAAI,CAAC,CACdE,GAAG,CAAC,OAAO,EAAE,IAAI,CAACL,MAAM,CAAC,CACzBK,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CACtBA,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC;IAEpB,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAW,GAAG,IAAI,CAACL,OAAO,WAAW,EAAE;MAAEG;IAAM,CAAE,CAAC;EACxE;;;uBAxBWP,cAAc,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdd,cAAc;MAAAe,OAAA,EAAdf,cAAc,CAAAgB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}